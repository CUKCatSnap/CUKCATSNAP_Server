CREATE TABLE agree (
    necessary boolean,
    id bigint generated by default as identity,
    content varchar(255),
    title varchar(255),
    primary key (id)
);

CREATE TABLE city_level (
    id bigint generated by default as identity,
    city_name varchar(255),
    code varchar(255),
    center geometry(Point, 4326),
    primary key (id)
);

CREATE TABLE district_level (
    city_level_id bigint,
    id bigint generated by default as identity,
    code varchar(255),
    district_name varchar(255),
    center geometry(Point, 4326),
    primary key (id)
);

CREATE TABLE feed (
    created_at timestamp(6),
    feed_id bigint generated by default as identity,
    photographer_id bigint,
    updated_at timestamp(6),
    content varchar(255),
    primary key (feed_id)
);

CREATE TABLE feed_comment (
    created_at timestamp(6),
    feed_comment_id bigint generated by default as identity,
    feed_id bigint,
    member_id bigint,
    parent_comment_id bigint,
    photographer_id bigint,
    updated_at timestamp(6),
    content varchar(255),
    primary key (feed_comment_id)
);

CREATE TABLE feed_like (
    created_at timestamp(6),
    feed_id bigint,
    feed_like_id bigint generated by default as identity,
    member_id bigint,
    photographer_id bigint,
    updated_at timestamp(6),
    primary key (feed_like_id)
);

CREATE TABLE feed_photo (
    feed_id bigint,
    feed_photo_id bigint generated by default as identity,
    photo_url varchar(255),
    primary key (feed_photo_id)
);

CREATE TABLE member_agree (
    agree_id bigint,
    created_at timestamp(6),
    member_id bigint,
    updated_at timestamp(6),
    user_agree_id bigint generated by default as identity,
    primary key (user_agree_id)
);

CREATE TABLE model (
    id bigint not null,
    sns_connect_date timestamp(6),
    sns_id varchar(255),
    snstype varchar(255) check (snstype in ('NAVER','CATSNAP')),
    primary key (id)
);

CREATE TABLE notification (
    actor_id bigint,
    created_at timestamp(6) not null,
    notification_id bigint generated by default as identity,
    read_at timestamp(6),
    receiver_id bigint,
    updated_at timestamp(6),
    content varchar(255),
    notification_type varchar(255) check (notification_type in ('PHOTOGRAPHER_SUBSCRIBE','PLACE_SUBSCRIBE','RESERVATION')),
    title varchar(255),
    primary key (notification_id, created_at)
) PARTITION BY RANGE (created_at);

CREATE TABLE photograph (
    id bigint not null,
    primary key (id)
);

CREATE TABLE photographer_block (
    created_at timestamp(6),
    member_id bigint,
    photographer_block_id bigint generated by default as identity,
    photographer_id bigint,
    updated_at timestamp(6),
    primary key (photographer_block_id)
);

CREATE TABLE photographer_subscribe (
    created_at timestamp(6),
    member_id bigint,
    photographer_id bigint,
    photographer_subscribe_id bigint generated by default as identity,
    updated_at timestamp(6),
    primary key (photographer_subscribe_id)
);

CREATE TABLE place_subscribe (
    created_at timestamp(6),
    member_id bigint,
    place_subscribe_id bigint generated by default as identity,
    updated_at timestamp(6),
    keyword varchar(255),
    primary key (place_subscribe_id)
);

CREATE TABLE program (
    deleted boolean,
    created_at timestamp(6),
    duration_minutes bigint,
    photographer_id bigint,
    price bigint,
    program_id bigint generated by default as identity,
    updated_at timestamp(6),
    content varchar(255),
    title varchar(255),
    primary key (program_id)
);

CREATE TABLE reservation (
    city_level_id bigint,
    created_at timestamp(6),
    district_level_id bigint,
    end_time timestamp(6),
    member_id bigint,
    photographer_id bigint,
    program_id bigint,
    reservation_id bigint generated by default as identity,
    start_time timestamp(6),
    town_level_id bigint,
    updated_at timestamp(6),
    location_name varchar(255),
    reservation_state varchar(255) check (reservation_state in ('PENDING','APPROVED','REJECTED','MEMBER_CANCELLED','PHOTOGRAPHY_CANCELLED')),
    location geometry(Point, 4326),
    primary key (reservation_id)
);

CREATE TABLE review (
    photographer_score integer,
    place_score integer,
    created_at timestamp(6),
    member_id bigint,
    photographer_id bigint,
    reservation_id bigint unique,
    review_id bigint generated by default as identity,
    updated_at timestamp(6),
    content varchar(255),
    primary key (review_id)
);

CREATE TABLE review_like (
    created_at timestamp(6),
    review_id bigint,
    review_like_id bigint generated by default as identity,
    updated_at timestamp(6),
    user_id bigint,
    primary key (review_like_id)
);

CREATE TABLE review_photo (
    review_id bigint,
    review_photo_id bigint generated by default as identity,
    photo_file_name varchar(255),
    primary key (review_photo_id)
);

CREATE TABLE town_level (
    district_level_id bigint,
    id bigint generated by default as identity,
    code varchar(255),
    town_name varchar(255),
    center geometry(Point, 4326),
    primary key (id)
);

CREATE TABLE users (
    birthday date,
    created_at timestamp(6),
    id bigint generated by default as identity,
    updated_at timestamp(6),
    user_type varchar(31) not null,
    identifier varchar(255),
    nickname varchar(255),
    password varchar(255),
    phone_number varchar(255),
    profile_photo_url varchar(255),
    primary key (id)
);

CREATE TABLE weekday_reservation_time_mapping (
    created_at timestamp(6),
    photographer_id bigint,
    updated_at timestamp(6),
    weekday_reservation_time_mapping_id bigint generated by default as identity,
    reservation_time_format_id varchar(255),
    weekday varchar(255) check (weekday in ('MONDAY','TUESDAY','WEDNESDAY','THURSDAY','FRIDAY','SATURDAY','SUNDAY','HOLIDAY')),
    primary key (weekday_reservation_time_mapping_id)
);

ALTER TABLE IF EXISTS district_level
    ADD CONSTRAINT fk_district_level__city_level FOREIGN KEY (city_level_id) REFERENCES city_level;

ALTER TABLE IF EXISTS feed
    ADD CONSTRAINT fk_feed__photograph FOREIGN KEY (photographer_id) REFERENCES photograph;

ALTER TABLE IF EXISTS feed_comment
    ADD CONSTRAINT fk_feed_comment__feed FOREIGN KEY (feed_id) REFERENCES feed;

ALTER TABLE IF EXISTS feed_comment
    ADD CONSTRAINT fk_feed_comment__model FOREIGN KEY (member_id) REFERENCES model;

ALTER TABLE IF EXISTS feed_comment
    ADD CONSTRAINT fk_feed_comment__feed_comment FOREIGN KEY (parent_comment_id) REFERENCES feed_comment;

ALTER TABLE IF EXISTS feed_comment
    ADD CONSTRAINT fk_feed_comment__photograph FOREIGN KEY (photographer_id) REFERENCES photograph;

ALTER TABLE IF EXISTS feed_like
    ADD CONSTRAINT fk_feed_like__feed FOREIGN KEY (feed_id) REFERENCES feed;

ALTER TABLE IF EXISTS feed_like
    ADD CONSTRAINT fk_feed_like__model FOREIGN KEY (member_id) REFERENCES model;

ALTER TABLE IF EXISTS feed_like
    ADD CONSTRAINT fk_feed_like__photograph FOREIGN KEY (photographer_id) REFERENCES photograph;

ALTER TABLE IF EXISTS feed_photo
    ADD CONSTRAINT fk_feed_photo__feed FOREIGN KEY (feed_id) REFERENCES feed;

ALTER TABLE IF EXISTS member_agree
    ADD CONSTRAINT fk_member_agree__agree FOREIGN KEY (agree_id) REFERENCES agree;

ALTER TABLE IF EXISTS member_agree
    ADD CONSTRAINT fk_member_agree__model FOREIGN KEY (member_id) REFERENCES model;

ALTER TABLE IF EXISTS model
    ADD CONSTRAINT fk_model__users FOREIGN KEY (id) REFERENCES users;

ALTER TABLE IF EXISTS notification
    ADD CONSTRAINT fk_notification__users FOREIGN KEY (receiver_id) REFERENCES users;

ALTER TABLE IF EXISTS photograph
    ADD CONSTRAINT fk_photograph__users FOREIGN KEY (id) REFERENCES users;

ALTER TABLE IF EXISTS photographer_block
    ADD CONSTRAINT fk_photographer_block__model FOREIGN KEY (member_id) REFERENCES model;

ALTER TABLE IF EXISTS photographer_block
    ADD CONSTRAINT fk_photographer_block__photograph FOREIGN KEY (photographer_id) REFERENCES photograph;

ALTER TABLE IF EXISTS photographer_subscribe
    ADD CONSTRAINT fk_photographer_subscribe__model FOREIGN KEY (member_id) REFERENCES model;

ALTER TABLE IF EXISTS photographer_subscribe
    ADD CONSTRAINT fk_photographer_subscribe__photograph FOREIGN KEY (photographer_id) REFERENCES photograph;

ALTER TABLE IF EXISTS place_subscribe
    ADD CONSTRAINT fk_place_subscribe__model FOREIGN KEY (member_id) REFERENCES model;

ALTER TABLE IF EXISTS program
    ADD CONSTRAINT fk_program__photograph FOREIGN KEY (photographer_id) REFERENCES photograph;

ALTER TABLE IF EXISTS reservation
    ADD CONSTRAINT fk_reservation__city_level FOREIGN KEY (city_level_id) REFERENCES city_level;

ALTER TABLE IF EXISTS reservation
    ADD CONSTRAINT fk_reservation__district_level FOREIGN KEY (district_level_id) REFERENCES district_level;

ALTER TABLE IF EXISTS reservation
    ADD CONSTRAINT fk_reservation__model FOREIGN KEY (member_id) REFERENCES model;

ALTER TABLE IF EXISTS reservation
    ADD CONSTRAINT fk_reservation__photograph FOREIGN KEY (photographer_id) REFERENCES photograph;

ALTER TABLE IF EXISTS reservation
    ADD CONSTRAINT fk_reservation__program FOREIGN KEY (program_id) REFERENCES program;

ALTER TABLE IF EXISTS reservation
    ADD CONSTRAINT fk_reservation__town_level FOREIGN KEY (town_level_id) REFERENCES town_level;

ALTER TABLE IF EXISTS review
    ADD CONSTRAINT fk_review__model FOREIGN KEY (member_id) REFERENCES model;

ALTER TABLE IF EXISTS review
    ADD CONSTRAINT fk_review__photograph FOREIGN KEY (photographer_id) REFERENCES photograph;

ALTER TABLE IF EXISTS review
    ADD CONSTRAINT fk_review__reservation FOREIGN KEY (reservation_id) REFERENCES reservation;

ALTER TABLE IF EXISTS review_like
    ADD CONSTRAINT fk_review_like__review FOREIGN KEY (review_id) REFERENCES review;

ALTER TABLE IF EXISTS review_like
    ADD CONSTRAINT fk_review_like__users FOREIGN KEY (user_id) REFERENCES users;

ALTER TABLE IF EXISTS review_photo
    ADD CONSTRAINT fk_review_photo__review FOREIGN KEY (review_id) REFERENCES review;

ALTER TABLE IF EXISTS town_level
    ADD CONSTRAINT fk_town_level__district_level FOREIGN KEY (district_level_id) REFERENCES district_level;

ALTER TABLE IF EXISTS weekday_reservation_time_mapping
    ADD CONSTRAINT fk_weekday_reservation_time_mapping__photograph FOREIGN KEY (photographer_id) REFERENCES photograph;


CREATE TABLE notification_202501
    PARTITION OF notification
    FOR VALUES FROM ('2025-01-01 00:00:00') TO ('2025-02-01 00:00:00');

CREATE TABLE notification_202502
    PARTITION OF notification
    FOR VALUES FROM ('2025-02-01 00:00:00') TO ('2025-03-01 00:00:00');

CREATE TABLE notification_202503
    PARTITION OF notification
    FOR VALUES FROM ('2025-03-01 00:00:00') TO ('2025-04-01 00:00:00');

CREATE TABLE notification_202504
    PARTITION OF notification
    FOR VALUES FROM ('2025-04-01 00:00:00') TO ('2025-05-01 00:00:00');

CREATE TABLE notification_202505
    PARTITION OF notification
    FOR VALUES FROM ('2025-05-01 00:00:00') TO ('2025-06-01 00:00:00');

CREATE TABLE notification_202506
    PARTITION OF notification
    FOR VALUES FROM ('2025-06-01 00:00:00') TO ('2025-07-01 00:00:00');

CREATE TABLE notification_202507
    PARTITION OF notification
    FOR VALUES FROM ('2025-07-01 00:00:00') TO ('2025-08-01 00:00:00');

CREATE TABLE notification_202508
    PARTITION OF notification
    FOR VALUES FROM ('2025-08-01 00:00:00') TO ('2025-09-01 00:00:00');

CREATE TABLE notification_202509
    PARTITION OF notification
    FOR VALUES FROM ('2025-09-01 00:00:00') TO ('2025-10-01 00:00:00');

CREATE TABLE notification_202510
    PARTITION OF notification
    FOR VALUES FROM ('2025-10-01 00:00:00') TO ('2025-11-01 00:00:00');

CREATE TABLE notification_202511
    PARTITION OF notification
    FOR VALUES FROM ('2025-11-01 00:00:00') TO ('2025-12-01 00:00:00');

CREATE TABLE notification_202512
    PARTITION OF notification
    FOR VALUES FROM ('2025-12-01 00:00:00') TO ('2026-01-01 00:00:00');

CREATE VIEW user_tiny_information AS
SELECT
    id,
    nickname ,
    profile_photo_url,
    user_type
FROM users;